using Godot;
using System.Collections.Generic;
using System;
using System.Security.Cryptography;
using System.Linq;
using System.Text;
using System.Buffers.Text;
using Godot.Collections;

public partial class CodeGenerated : Node
{
    public override void _Ready()
    {
        // Called every time the node is added to the scene.
        // Initialization here.
        GD.Print("Hello from C# to Godot :)");
		GenerateTerrain();
    }

    public override void _Process(double delta)
    {
        // Called every frame. Delta is time since the last frame.
        // Update game logic here.
    }


    public static float Lerp(float a, float b, float t)
    {
        return a + (b - a) * t;
    }

    public void GenerateTerrain()
	{
		var terrain = (Variant)GetNode("Terrain3D");
		terrain.AsGodotObject().Call("set_collision_enabled", false);
		terrain.AsGodotObject().Set("storage", ClassDB.Instantiate("Terrain3DStorage"));
		terrain.AsGodotObject().Set("texture_list", ClassDB.Instantiate("Terrain3DTextureList"));
		
		var terrainMaterial = terrain.AsGodotObject().Get("material");
		terrainMaterial.AsGodotObject().Set("world_background", 2);
		terrainMaterial.AsGodotObject().Set("auto_shader", true);
		terrainMaterial.AsGodotObject().Set("dual_scaling", true);
        terrain.AsGodotObject().Set("material", terrainMaterial);

        terrain.AsGodotObject().Set("texture_list", GD.Load("res://terrainData/texture_list.tres"));
		//AddChild((Node)terrain, true);

		GD.Print("start");

		FastNoiseLite noise = new FastNoiseLite();
		noise.Frequency = 0.0005f;
		noise.Seed = 1;
		int x_axis = 8192;//16000;
		int y_axis = 4096;//6000;
        Image img = Image.Create(x_axis, y_axis, false, Image.Format.Rf);

		Curve3D path = new Curve3D();
		path.AddPoint(new Vector3(0, 2024, 0f));
		path.AddPoint(new Vector3(2048, 1524, 0.1f), new Vector3(-5.0f, -5.0f, 0.0f), new Vector3(5.0f, 5.0f, 0.0f));
		path.AddPoint(new Vector3(2048, 3524, 0.5f), new Vector3(-5.0f, -5.0f, 0.0f), new Vector3(5.0f, 5.0f, 0.0f));
		path.AddPoint(new Vector3(4096, 3524, 0.1f), new Vector3(-500.0f, -500.0f, 0.0f), new Vector3(50.0f, 50.0f, 0.0f));
		path.AddPoint(new Vector3(8192, 2024, 0.5f));
		


		List<Vector3> data = new List<Vector3>(path.Tessellate(7, 6));//path.GetBakedPoints());
        List<Vector3> sortedData = data.Select(v => new Vector3(MathF.Round(v.X), v.Y, v.Z))
                                       .OrderBy(v => v.X)
                                       .ToList();

        List<Vector3> path_result = new List<Vector3>();

        for (int i = 0; i < sortedData.Count - 1; i++)
        {
            path_result.Add(sortedData[i]);
            // Check if there is a gap in the x values
            if (sortedData[i + 1].X - sortedData[i].X > 1)
            {
                // Interpolate the z value and insert a new row
                for (float x = sortedData[i].X + 1; x < sortedData[i + 1].X; x++)
                {
                    float t = (x - sortedData[i].X) / (sortedData[i + 1].X - sortedData[i].X);
                    float y = Lerp(sortedData[i].Y, sortedData[i + 1].Y, t);
                    float z = Lerp(sortedData[i].Z, sortedData[i + 1].Z, t);
                    path_result.Add(new Vector3(x, y, z));
                }
            }
        }

        // Don't forget to add the last data point
        path_result.Add(sortedData[^1]);
		GD.Print("loop");
        img = noise.GetImage(x_axis, y_axis);
        GD.Print("post noise");
        /*var rd = RenderingServer.CreateLocalRenderingDevice();
        var shaderFile = GD.Load<RDShaderFile>("res://scripts/terrain/terrain_smoothing.glsl");
        var shaderBytecode = shaderFile.GetSpirV();
        var shader = rd.ShaderCreateFromSpirV(shaderBytecode);
        // Create a texture from the image
        var noiseTexture = ImageTexture.CreateFromImage(img);

        // Create a texture for the result
        var resultTexture = new ImageTexture();
        Image temp_image = Image.Create(x_axis, y_axis, false, Image.Format.Rf);
        resultTexture.SetImage(temp_image);


        // Create a uniform for the texture
        var uniformTexture = new RDUniform
        {
            UniformType = RenderingDevice.UniformType.Image,
            Binding = 0
        };
        uniformTexture.AddId(noiseTexture.GetRid());

        // Create a uniform set with the texture uniform
        

        // Create a uniform for the result texture
        var uniformResult = new RDUniform
        {
            UniformType = RenderingDevice.UniformType.Image,
            Binding = 1
        };
        uniformResult.AddId(resultTexture.GetRid());

        // Add the result uniform to the uniform set
        

        // Prepare our data. We use floats in the shader, so we need 32 bit.
        var axes = new float[] { x_axis, y_axis };
        var axesBytes = new byte[axes.Length * sizeof(float)];
        Buffer.BlockCopy(axes, 0, axesBytes, 0, axesBytes.Length);

        // Create a uniform for the axes
        var uniformAxes = new RDUniform
        {
            UniformType = RenderingDevice.UniformType.UniformBuffer,
            Binding = 2
        };
        var uniformSet = rd.UniformSetCreate(new Array<RDUniform> { uniformTexture, uniformResult, uniformAxes }, shader, 0);

        var pipeline = rd.ComputePipelineCreate(shader);
        var computeList = rd.ComputeListBegin();
        rd.ComputeListBindComputePipeline(computeList, pipeline);
        rd.ComputeListBindUniformSet(computeList, uniformSet, 0);
        rd.ComputeListDispatch(computeList, xGroups: 5, yGroups: 1, zGroups: 1);
        rd.ComputeListEnd();
        rd.Submit();
        // Wait for the compute shader to finish
        rd.Sync();
        Image gpuImage = resultTexture.GetImage();*/

        // get our data
        for (int x = 0; x < x_axis; x++)
        {
            bool edge_height = false;
            if (x < (0 + 200))
            {
                edge_height = true;
            }
            float height = 0.0f;
            for (int y = 0; y < y_axis; y++)
            {
                //height = noise.GetNoise2D(x, y) * 1.0f;
                height = img.GetPixel(x, y).R;

                if (height < 0)
                {
                    height = height / ((1 - height) * (1.0f - height));
                }

                if (y < (0 + 200))
                {
                    height = height * (y / 200.0f);
                }
                else if (y > (y_axis - 200))
                {
                    height = height * ((y_axis - y) / 200.0f);
                }
                if (edge_height)
                {
                    height = height * (x / 200.0f);
                }

                img.SetPixel(x, y, new Color(height, 0, 0, 1));
            }
        }
        GD.Print("Path Pass");
        foreach (var val in path_result)
        {
            //GD.Print(val);
            float test_x = 0;
            float test_y = 0;
            float diff = (val.X - test_x) + (val.Y - test_y);
            
        }


        //img.SavePng("C:\\Users\\jeffe\\test_images\\test.png");
        GD.Print("import");
        //terrain.AsGodotObject().Get("storage").AsGodotObject().Call("import_images", new Image[] { img, null, null }, new Vector3(0, -2024, -2024), 0.0f, 400.0f);
        terrain.AsGodotObject().Get("storage").AsGodotObject().Call("import_images", new Image[] { img, null, null }, new Vector3(0, -2024, -2024), 0.0f, 400.0f);



        //hole testing
        //var terrainUtil = ClassDB.Instantiate("Terrain3DUtil");
        //int bits = (int)terrainUtil.AsGodotObject().Call("enc_base", (0)) | (int)terrainUtil.AsGodotObject().Call("enc_overlay", (0)) | (int)terrainUtil.AsGodotObject().Call("enc_blend", (0)) |
        //   (int)terrainUtil.AsGodotObject().Call("enc_auto", (0)) | (int)terrainUtil.AsGodotObject().Call("enc_nav", (0)) | (int)terrainUtil.AsGodotObject().Call("enc_hole", (1));
        //Color hole_color = new Color((float)terrainUtil.AsGodotObject().Call("as_float", bits), 0f, 0f, 1f);
        //for (int x = 1000; x < 2000; x++)
        //{
        //	for (int z = 1000; z < 2000; z++)
        //	{
        //terrain.AsGodotObject().Get("storage").AsGodotObject().Call("set_control", new Vector3(x, 0, z), hole_color);
        //terrain.AsGodotObject().Get("storage").AsGodotObject().Call("set_pixel", 1, new Vector3(x, 0, z), hole_color);
        //	}
        //}
        //terrain.AsGodotObject().Get("storage").AsGodotObject().Call("force_update_maps", 1);



        GD.Print("navigation");
		// Enable collision. Enable the first if you wish to see it with Debug/Visible Collision Shapes
		terrain.AsGodotObject().Call("set_show_debug_collision", true);
		terrain.AsGodotObject().Call("set_collision_enabled", true);

        //Enable runtime navigation baking using the terrain
        Node runtime_nav_baker = GetNode("RuntimeNavigationBaker");
		runtime_nav_baker.Set("terrain", terrain);
		runtime_nav_baker.Set("enabled", true);

		//Retreive 512x512 region blur map showing where the regions are
		//var rbmap_rid: RID = terrain.material.get_region_blend_map()

		//img = RenderingServer.texture_2d_get(rbmap_rid)
    }
}